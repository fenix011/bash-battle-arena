#!/bin/bash
clear

# --- INSTRUCCIONES ---
echo
echo "üìö NIVEL 7: Ordenar Archivos por Tama√±o"
echo
echo "üéØ Misi√≥n:"
echo "1. Escanea todos los archivos .txt en el directorio actual"
echo "2. Ord√©nalos por tama√±o (del m√°s peque√±o al m√°s grande)"
echo "3. Guarda el resultado en un archivo llamado: sort_output.txt"
echo "4. Cada l√≠nea debe seguir este formato: nombrearchivo - TAMA√ëO bytes"
echo
echo "üß± Prerrequisitos:"
echo "- Todos los archivos .txt deben ser escaneados (excluyendo sort_output.txt)"
echo "- La salida debe estar ordenada num√©ricamente por tama√±o"
echo "- La salida debe guardarse en un archivo llamado: sort_output.txt"
echo "- Las l√≠neas de salida deben verse exactamente as√≠: ejemplo.txt - 42 bytes"
echo
echo "üñ•Ô∏è C√≥mo completarlo:"
echo "1. Crea y guarda tu script como sort_txt_by_size.sh"
echo "2. Usa 'stat' o 'wc -c' para obtener los tama√±os de archivo"
echo "   ‚Ä¢ Usuarios de macOS: stat -f%z nombrearchivo"
echo "   ‚Ä¢ Usuarios de Linux: stat -c%s nombrearchivo"
echo "3. Usa 'sort -k3 -n' para ordenar por tama√±o"
echo "4. Escribe: check (en esta ventana) cuando est√©s listo"
echo "‚ö†Ô∏è Importante: Si creas o modificas alg√∫n archivo .txt, debes volver a ejecutar tu script antes de verificar!"
echo

# --- BUCLE DE VERIFICACI√ìN ---
while true; do
  read -p $'\nEscribe "check" para verificar tu soluci√≥n o "exit" para salir: ' input

  case $input in
    exit)
      echo "Saliendo del Nivel 7..."
      break
      ;;
    check)
      echo
      echo "üîç Verificando sort_output.txt..."
      output_archivo="sort_output.txt"

      if [[ ! -f "$output_archivo" ]]; then
        echo "‚ùå '$output_archivo' no encontrado. Ejecuta tu script antes de verificar."
        continue
      fi

      # Build expected output
      expected=""
      for archivo in *.txt; do
        [[ "$archivo" == "$output_archivo" ]] && continue

        if [[ -f "$archivo" ]]; then
          if [[ "$(uname)" == "Darwin" ]]; then
            size=$(stat -f%z "$archivo")
          else
            size=$(stat -c%s "$archivo")
          fi
          expected+="$archivo - $size bytes"$'\n'
        fi
      done

      # Sort expected output and clean blank lines
      expected_sorted=$(echo "$expected" | sed '/^$/d' | sort -k3 -n)

      # Clean actual output
      actual=$(cat "$output_archivo" | sed '/^$/d')

      if [[ "$expected_sorted" == "$actual" ]]; then
        echo "‚úÖ ¬°√âxito! Tu salida es correcta y est√° ordenada."
        break
      else
        echo "‚ùå Salida incorrecta en $output_archivo. Aqu√≠ est√° la diferencia:"
        diff <(echo "$expected_sorted") <(echo "$actual")
      fi
      ;;
    *)
      echo "Entrada inv√°lida. Por favor escribe 'check' para verificar tu soluci√≥n o 'exit' para salir."
      ;;
  esac
done

read -p "Presiona Enter para volver al men√∫..."

